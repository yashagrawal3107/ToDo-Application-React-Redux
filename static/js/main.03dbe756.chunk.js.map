{"version":3,"sources":["features/todoSlice.js","components/Input.js","components/TodoItem.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","todoStatus","status","actions","selectTodoList","todos","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","Input","classes","useState","title","setTitle","description","setDescription","dueDate","setDueDate","setTodoStatus","dispatch","useDispatch","addTodo","e","preventDefault","console","log","alert","Date","now","className","onSubmit","TextField","label","variant","required","style","margin","fullWidth","InputLabelProps","shrink","value","onChange","target","multiline","rows","type","InputLabel","Select","labelId","MenuItem","Button","color","onClick","TodoItem","root","minWidth","bullet","transform","fontSize","pos","marginBottom","Card","CardContent","Typography","component","App","useSelector","store","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03dbe756.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    todoList: []\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        saveTodo: (state, action) => {\r\n            state.todoList.push(action.payload)\r\n        },\r\n\r\n        setCheck: (state, action) => {\r\n            state.todoList.map(item => {\r\n                if(action.payload.id === item.id){\r\n                    \r\n                    item.todoStatus = action.payload.status;\r\n                }\r\n            })\r\n        }\r\n    }\r\n});\r\n\r\nexport const { saveTodo, setCheck } = todoSlice.actions\r\n\r\nexport const selectTodoList = state => state.todos.todoList\r\n\r\nexport default todoSlice.reducer","import React, { useState } from 'react';\r\nimport \"./input.css\";\r\nimport {useDispatch} from 'react-redux';\r\nimport {saveTodo} from \"../features/todoSlice\"\r\nimport { Button } from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n}));\r\n\r\n\r\nconst Input = () => {\r\n\r\n    const classes = useStyles();\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [dueDate, setDueDate] = useState('');\r\n    const [todoStatus, setTodoStatus] = useState('');\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTodo = (e) => {\r\n        e.preventDefault();\r\n        console.log(`Adding ${title}`)\r\n\r\n        if(title === \"\"){\r\n          alert(\"Enter the title\");\r\n        }\r\n        else if (description === \"\"){\r\n          alert(\"Enter the description\");\r\n        }\r\n        else{\r\n          dispatch(saveTodo({\r\n            title: title,\r\n            description: description,\r\n            dueDate: dueDate,\r\n            todoStatus: todoStatus,\r\n            id: Date.now()\r\n        }))\r\n            \r\n        setTitle(\"\") ;\r\n        setDescription(\"\");\r\n        setDueDate(\"\");\r\n        setTodoStatus(\"\");\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <>\r\n        \r\n            <div className = \"input\">\r\n            <form onSubmit={addTodo}>\r\n            <TextField\r\n              label=\"Title\"\r\n              variant=\"outlined\"\r\n              required\r\n              id=\"outlined-full-width\"\r\n              style={{ margin: 8 }}\r\n              fullWidth\r\n              margin=\"normal\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              value = {title}\r\n              onChange={e => setTitle(e.target.value)} \r\n        />\r\n        <br />\r\n            <TextField\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Description\"\r\n              multiline\r\n              rows={4}\r\n              variant=\"outlined\"\r\n              value = {description} \r\n              onChange={e => setDescription(e.target.value)}\r\n              required\r\n              id=\"outlined-full-width\"\r\n              style={{ margin: 8 }}\r\n              fullWidth\r\n              margin=\"normal\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n           />\r\n       \r\n        <br/>\r\n            <TextField\r\n              id=\"date\"\r\n              label=\"Due Date\"\r\n              type=\"date\"\r\n              className={classes.textField}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              value = {dueDate} \r\n              onChange={e => setDueDate(e.target.value)} \r\n            />\r\n        \r\n        <br />\r\n        <br/>\r\n            <InputLabel className={classes.textField} id=\"demo-simple-select-label\">Status</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-label\"\r\n              id=\"demo-simple-select\"\r\n              value={todoStatus}\r\n              onChange={e => setTodoStatus(e.target.value)}\r\n              className={classes.textField}\r\n            >\r\n            \r\n            <MenuItem value=\"ToDo\">ToDo</MenuItem>\r\n            <MenuItem value=\"Ongoing\">Ongoing</MenuItem>\r\n            <MenuItem value=\"Stalled\">Stalled</MenuItem>\r\n            <MenuItem value=\"Done\">Done</MenuItem>\r\n            </Select>\r\n\r\n              <div className=\"bt\">\r\n                <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\"\r\n                  value=\"Submit\" onClick = {addTodo} > Add\r\n            \r\n                </Button>\r\n              </div>\r\n\r\n      </form>    \r\n      </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react'\r\nimport './TodoItem.css'\r\nimport {useDispatch} from 'react-redux';\r\nimport { setCheck } from '../features/todoSlice';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst TodoItem = ({title, description, todoStatus, dueDate,id}) => {\r\n\r\n    \r\n    const dispatch = useDispatch()\r\n    \r\n    const handlecheck = (e) => {\r\n\r\n        const status = e.target.value;\r\n\r\n        dispatch(setCheck({id: id, status : status}))\r\n    }\r\n    \r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\nconst classes = useStyles();\r\n    return (\r\n        \r\n        <div>\r\n       \r\n\r\n            <Card className={classes.root} variant=\"outlined\">\r\n                <CardContent>\r\n        \r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                    {title}\r\n                    </Typography>\r\n                    \r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                    {description}\r\n                    </Typography>\r\n                    <br/>\r\n                    <div className = \"date\">\r\n                    <Typography variant=\"body3\" component=\"p\">\r\n                    Due : {dueDate}\r\n                    </Typography>\r\n                    </div>\r\n                    <div className = \"status\">\r\n                         <InputLabel className={classes.textField} id=\"demo-simple-select-label\">Status</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={todoStatus}\r\n                                onChange={handlecheck}\r\n                                // onChange={e => setTodoStatus(e.target.value)}\r\n                                className={classes.textField}\r\n                            >\r\n                                <MenuItem value=\"ToDo\">ToDo</MenuItem>\r\n                                <MenuItem value=\"Ongoing\">Ongoing</MenuItem>\r\n                                <MenuItem value=\"Stalled\">Stalled</MenuItem>\r\n                                <MenuItem value=\"Done\">Done</MenuItem>\r\n                            </Select>\r\n                            </div>\r\n                </CardContent>\r\n      \r\n            </Card>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem\r\n","import React from 'react';\nimport \"./App.css\";\nimport Input from './components/Input';\nimport TodoItem from './components/TodoItem';\n\nimport {useSelector} from \"react-redux\";\n\nimport {selectTodoList} from \"./features/todoSlice\"\n\nfunction App() {\nconst todoList = useSelector(selectTodoList)\n\n  return (\n    <div className=\"App\">\n      <div className = \"todo\">\n        <h1> My ToDo List</h1>\n        <br/>\n        <Input />\n        <br/>\n        <br/>\n        <hr/>\n        <br/>\n        <div className =\"app_container\">\n          <div className =\"app_todoContainer\">\n            {\n              todoList.map(item => (\n                <TodoItem\n                  title = {item.title}\n                  description = {item.description}\n                  id = {item.id}\n                  todoStatus = {item.todoStatus}\n                  dueDate = {item.dueDate}\n                />\n              ))\n            }\n          </div>\n     </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from \"../features/todoSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    todos: todoReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}